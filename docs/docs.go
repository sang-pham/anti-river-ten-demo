// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/healthz": {
            "get": {
                "tags": [
                    "platform"
                ],
                "summary": "Liveness probe",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/readyz": {
            "get": {
                "tags": [
                    "platform"
                ],
                "summary": "Readiness probe",
                "responses": {
                    "200": {
                        "description": "ready",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of all users (ADMIN role required)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "List users (Admin only)",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of users to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of users to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ListUsersResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new user with specified role (ADMIN role required)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Create user (Admin only)",
                "parameters": [
                    {
                        "description": "Create user request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateUserReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/admin/users/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete a user (ADMIN role required)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Delete user (Admin only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/admin/users/{id}/role": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a user's role (ADMIN role required)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update user role (Admin only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update role request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserRoleReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/admin/users/{id}/status": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Activate or deactivate a user (ADMIN role required)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Activate/Deactivate user (Admin only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update status request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserStatusReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/ai-analysis": {
            "get": {
                "tags": [
                    "ai"
                ],
                "summary": "AI analysis endpoint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database name",
                        "name": "db_name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.AnalysisResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.AnalysisResult"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.AnalysisResult"
                        }
                    }
                }
            }
        },
        "/v1/auth/login": {
            "post": {
                "description": "Login with username or email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/auth/refresh": {
            "post": {
                "description": "Exchange refresh token for a new access token (rotation)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/auth/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "Register request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/sql-logs": {
            "get": {
                "description": "Provide database name via query parameter \"db\" to list its SQL queries.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sql-logs"
                ],
                "summary": "List SQL queries by database",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database name",
                        "name": "db",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ListByDBResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/sql-logs/databases": {
            "get": {
                "description": "Returns distinct database names that have SQL log entries.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sql-logs"
                ],
                "summary": "List databases with SQL logs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ListDatabasesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/sql-logs/report": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Aggregated anomalies and metrics within a time range. Defaults: last 7 days. Thresholds: slow_ms \u003e= 1000 OR (exec_time_ms \u003e= 500 AND exec_count \u003e= 100).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sql-logs"
                ],
                "summary": "SQL log report (JSON)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time (RFC3339 or YYYY-MM-DD)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339 or YYYY-MM-DD)",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by database name",
                        "name": "db",
                        "in": "query"
                    },
                    {
                        "maximum": 5000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 500,
                        "description": "Max anomalies to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Slow threshold in ms",
                        "name": "slow_ms",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Frequent+slow time threshold in ms",
                        "name": "freq_slow_ms",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Frequent count threshold",
                        "name": "freq_count",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Hard cap upper bound for anomalies count",
                        "name": "cap",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/sqllog.ReportData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/sql-logs/report.csv": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Download the aggregated report as CSV.",
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "sql-logs"
                ],
                "summary": "SQL log report (CSV)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time (RFC3339 or YYYY-MM-DD)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339 or YYYY-MM-DD)",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by database name",
                        "name": "db",
                        "in": "query"
                    },
                    {
                        "maximum": 5000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 500,
                        "description": "Max anomalies to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Slow threshold in ms",
                        "name": "slow_ms",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Frequent+slow time threshold in ms",
                        "name": "freq_slow_ms",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Frequent count threshold",
                        "name": "freq_count",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Hard cap upper bound for anomalies count",
                        "name": "cap",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CSV content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/sql-logs/report.pdf": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Download the aggregated report as PDF.",
                "produces": [
                    "application/pdf"
                ],
                "tags": [
                    "sql-logs"
                ],
                "summary": "SQL log report (PDF)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time (RFC3339 or YYYY-MM-DD)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339 or YYYY-MM-DD)",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by database name",
                        "name": "db",
                        "in": "query"
                    },
                    {
                        "maximum": 5000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 500,
                        "description": "Max anomalies to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Slow threshold in ms",
                        "name": "slow_ms",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Frequent+slow time threshold in ms",
                        "name": "freq_slow_ms",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Frequent count threshold",
                        "name": "freq_count",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Hard cap upper bound for anomalies count",
                        "name": "cap",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PDF content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/sql-logs/scan": {
            "get": {
                "description": "Apply rule: exec_time_ms \u003e 500 AND exec_count \u003e 100. Returns abnormal queries with status indicators.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sql-logs"
                ],
                "summary": "Scan for abnormal SQL queries",
                "parameters": [
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "Maximum number of items to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/v1/sql-logs/upload": {
            "post": {
                "description": "Accepts multipart/form-data with field \"file\" (.log or .txt), parses valid entries and stores them; malformed lines are reported.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sql-logs"
                ],
                "summary": "Upload SQL log file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "logsql.txt",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UploadResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorEnvelope"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.AnalysisResult": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.QueryAnalysis"
                    }
                },
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateUserReq": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.ErrorEnvelope": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string"
                        },
                        "message": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "handlers.ListByDBResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.SQLLogItem"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.ListDatabasesResponse": {
            "type": "object",
            "properties": {
                "databases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handlers.ListUsersResp": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.UserResp"
                    }
                }
            }
        },
        "handlers.LoginReq": {
            "type": "object",
            "properties": {
                "identifier": {
                    "description": "username or email",
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginResp": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string"
                },
                "refresh_expires_at": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/handlers.UserResp"
                }
            }
        },
        "handlers.QueryAnalysis": {
            "type": "object",
            "properties": {
                "exec_count": {
                    "type": "integer"
                },
                "exec_time_ms": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "sql_query": {
                    "type": "string"
                },
                "suggestions": {
                    "type": "string"
                }
            }
        },
        "handlers.RefreshReq": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "handlers.RefreshResp": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string"
                },
                "refresh_expires_at": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/handlers.UserResp"
                }
            }
        },
        "handlers.RegisterReq": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.SQLLogItem": {
            "type": "object",
            "properties": {
                "exec_count": {
                    "type": "integer"
                },
                "exec_time_ms": {
                    "type": "integer"
                },
                "sql_query": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateUserRoleReq": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateUserStatusReq": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                }
            }
        },
        "handlers.UploadResponse": {
            "type": "object",
            "properties": {
                "content_type": {
                    "type": "string"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filename": {
                    "type": "string"
                },
                "inserted": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "skipped": {
                    "type": "integer"
                },
                "total_lines": {
                    "type": "integer"
                }
            }
        },
        "handlers.UserResp": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "created_time": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updated_time": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "sqllog.AnomalyDetail": {
            "type": "object",
            "properties": {
                "db_name": {
                    "type": "string"
                },
                "exec_count": {
                    "type": "integer"
                },
                "exec_time_ms": {
                    "type": "integer"
                },
                "reasons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sql_query": {
                    "type": "string"
                },
                "suggestions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "sqllog.ReportData": {
            "type": "object",
            "properties": {
                "anomalies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sqllog.AnomalyDetail"
                    }
                },
                "generated_at": {
                    "type": "string"
                },
                "summary": {
                    "$ref": "#/definitions/sqllog.ReportSummary"
                },
                "timezone": {
                    "type": "string"
                }
            }
        },
        "sqllog.ReportSummary": {
            "type": "object",
            "properties": {
                "anomaly_count": {
                    "type": "integer"
                },
                "by_db": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "from": {
                    "type": "string"
                },
                "suggestion_count": {
                    "type": "integer"
                },
                "to": {
                    "type": "string"
                },
                "total_queries": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "go-demo API",
	Description:      "REST API demo with auth",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
