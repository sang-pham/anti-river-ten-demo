basePath: /
definitions:
  handlers.ErrorEnvelope:
    properties:
      error:
        properties:
          code:
            type: string
          message:
            type: string
        type: object
    type: object
  handlers.LoginReq:
    properties:
      identifier:
        description: username or email
        type: string
      password:
        type: string
    type: object
  handlers.LoginResp:
    properties:
      expires_at:
        type: string
      refresh_expires_at:
        type: string
      refresh_token:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/handlers.UserResp'
    type: object
  handlers.RefreshReq:
    properties:
      refresh_token:
        type: string
    type: object
  handlers.RefreshResp:
    properties:
      expires_at:
        type: string
      refresh_expires_at:
        type: string
      refresh_token:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/handlers.UserResp'
    type: object
  handlers.RegisterReq:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handlers.UserResp:
    properties:
      created_by:
        type: string
      created_time:
        type: string
      email:
        type: string
      id:
        type: string
      role:
        type: string
      updated_time:
        type: string
      username:
        type: string
    type: object
  handlers.ListDatabasesResponse:
    properties:
      databases:
        items:
          type: string
        type: array
    type: object
  handlers.SQLLogItem:
    properties:
      sql_query:
        type: string
      exec_time_ms:
        format: int64
        type: integer
      exec_count:
        format: int64
        type: integer
    type: object
  handlers.ListByDBResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/handlers.SQLLogItem'
        type: array
      message:
        type: string
    type: object
  handlers.UploadResponse:
    properties:
      message:
        type: string
      total_lines:
        format: int32
        type: integer
      inserted:
        format: int32
        type: integer
      skipped:
        format: int32
        type: integer
      errors:
        items:
          type: string
        type: array
      content_type:
        type: string
      filename:
        type: string
    type: object
info:
  contact: {}
  description: REST API demo with auth
  title: go-demo API
  version: "1.0"
paths:
  /healthz:
    get:
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Liveness probe
      tags:
      - platform
  /readyz:
    get:
      responses:
        "200":
          description: ready
          schema:
            type: string
      summary: Readiness probe
      tags:
      - platform
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login with username or email
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      summary: Login
      tags:
      - auth
  /v1/auth/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Exchange refresh token for a new access token (rotation)
      parameters:
      - description: Refresh request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RefreshResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      summary: Refresh access token
      tags:
      - auth
  /v1/auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.UserResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      summary: Register user
      tags:
      - auth
  /v1/sql-logs/databases:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListDatabasesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      summary: List databases with SQL logs
      description: Returns distinct database names that have SQL log entries.
      tags:
      - sql-logs
  /v1/sql-logs:
    get:
      produces:
      - application/json
      parameters:
      - name: db
        in: query
        required: true
        type: string
        description: Database name
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListByDBResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      summary: List SQL queries by database
      description: Provide database name via query parameter "db" to list its SQL queries.
      tags:
      - sql-logs
  /v1/sql-logs/upload:
    post:
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: file
        in: formData
        required: true
        type: file
        description: logsql.txt
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      summary: Upload SQL log file
      description: Accepts multipart/form-data with field "file" (.log or .txt), parses valid entries and stores them; malformed lines are reported.
      tags:
      - sql-logs
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
