basePath: /
definitions:
  handlers.AnalysisResult:
    properties:
      data:
        items:
          $ref: '#/definitions/handlers.QueryAnalysis'
        type: array
      error:
        type: string
      status:
        type: string
    type: object
  handlers.CreateUserReq:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  handlers.ErrorEnvelope:
    properties:
      error:
        properties:
          code:
            type: string
          message:
            type: string
        type: object
    type: object
  handlers.ListByDBResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/handlers.SQLLogItem'
        type: array
      message:
        type: string
    type: object
  handlers.ListDatabasesResponse:
    properties:
      databases:
        items:
          type: string
        type: array
    type: object
  handlers.ListUsersResp:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/handlers.UserResp'
        type: array
    type: object
  handlers.LoginReq:
    properties:
      identifier:
        description: username or email
        type: string
      password:
        type: string
    type: object
  handlers.LoginResp:
    properties:
      expires_at:
        type: string
      refresh_expires_at:
        type: string
      refresh_token:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/handlers.UserResp'
    type: object
  handlers.QueryAnalysis:
    properties:
      exec_count:
        type: integer
      exec_time_ms:
        type: integer
      id:
        type: integer
      sql_query:
        type: string
      suggestions:
        type: string
    type: object
  handlers.RefreshReq:
    properties:
      refresh_token:
        type: string
    type: object
  handlers.RefreshResp:
    properties:
      expires_at:
        type: string
      refresh_expires_at:
        type: string
      refresh_token:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/handlers.UserResp'
    type: object
  handlers.RegisterReq:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handlers.SQLLogItem:
    properties:
      exec_count:
        type: integer
      exec_time_ms:
        type: integer
      sql_query:
        type: string
    type: object
  handlers.UpdateUserRoleReq:
    properties:
      role:
        type: string
    type: object
  handlers.UpdateUserStatusReq:
    properties:
      active:
        type: boolean
    type: object
  handlers.UploadResponse:
    properties:
      content_type:
        type: string
      errors:
        items:
          type: string
        type: array
      filename:
        type: string
      inserted:
        type: integer
      message:
        type: string
      skipped:
        type: integer
      total_lines:
        type: integer
    type: object
  handlers.UserResp:
    properties:
      created_by:
        type: string
      created_time:
        type: string
      email:
        type: string
      id:
        type: string
      role:
        type: string
      updated_time:
        type: string
      username:
        type: string
    type: object
  sqllog.AnomalyDetail:
    properties:
      db_name:
        type: string
      exec_count:
        type: integer
      exec_time_ms:
        type: integer
      reasons:
        items:
          type: string
        type: array
      sql_query:
        type: string
      suggestions:
        items:
          type: string
        type: array
    type: object
  sqllog.ReportData:
    properties:
      anomalies:
        items:
          $ref: '#/definitions/sqllog.AnomalyDetail'
        type: array
      generated_at:
        type: string
      summary:
        $ref: '#/definitions/sqllog.ReportSummary'
      timezone:
        type: string
    type: object
  sqllog.ReportSummary:
    properties:
      anomaly_count:
        type: integer
      by_db:
        additionalProperties:
          type: integer
        type: object
      from:
        type: string
      suggestion_count:
        type: integer
      to:
        type: string
      total_queries:
        type: integer
    type: object
info:
  contact: {}
  description: REST API demo with auth
  title: go-demo API
  version: "1.0"
paths:
  /healthz:
    get:
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Liveness probe
      tags:
      - platform
  /readyz:
    get:
      responses:
        "200":
          description: ready
          schema:
            type: string
      summary: Readiness probe
      tags:
      - platform
  /v1/admin/users:
    get:
      description: Get a paginated list of all users (ADMIN role required)
      parameters:
      - default: 20
        description: Number of users to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of users to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListUsersResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: List users (Admin only)
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new user with specified role (ADMIN role required)
      parameters:
      - description: Create user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.UserResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Create user (Admin only)
      tags:
      - admin
  /v1/admin/users/{id}:
    delete:
      description: Soft delete a user (ADMIN role required)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User deleted successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Delete user (Admin only)
      tags:
      - admin
  /v1/admin/users/{id}/role:
    put:
      consumes:
      - application/json
      description: Update a user's role (ADMIN role required)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update role request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRoleReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Update user role (Admin only)
      tags:
      - admin
  /v1/admin/users/{id}/status:
    put:
      consumes:
      - application/json
      description: Activate or deactivate a user (ADMIN role required)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update status request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserStatusReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Activate/Deactivate user (Admin only)
      tags:
      - admin
  /v1/ai-analysis:
    get:
      parameters:
      - description: Database name
        in: query
        name: db_name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AnalysisResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.AnalysisResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.AnalysisResult'
      summary: AI analysis endpoint
      tags:
      - ai
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login with username or email
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      summary: Login
      tags:
      - auth
  /v1/auth/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Exchange refresh token for a new access token (rotation)
      parameters:
      - description: Refresh request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RefreshResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      summary: Refresh access token
      tags:
      - auth
  /v1/auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.UserResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      summary: Register user
      tags:
      - auth
  /v1/sql-logs:
    get:
      description: Provide database name via query parameter "db" to list its SQL
        queries.
      parameters:
      - description: Database name
        in: query
        name: db
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListByDBResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      summary: List SQL queries by database
      tags:
      - sql-logs
  /v1/sql-logs/databases:
    get:
      description: Returns distinct database names that have SQL log entries.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListDatabasesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      summary: List databases with SQL logs
      tags:
      - sql-logs
  /v1/sql-logs/report:
    get:
      description: 'Aggregated anomalies and metrics within a time range. Defaults:
        last 7 days. Thresholds: slow_ms >= 1000 OR (exec_time_ms >= 500 AND exec_count
        >= 100).'
      parameters:
      - description: Start time (RFC3339 or YYYY-MM-DD)
        in: query
        name: from
        type: string
      - description: End time (RFC3339 or YYYY-MM-DD)
        in: query
        name: to
        type: string
      - description: Filter by database name
        in: query
        name: db
        type: string
      - default: 500
        description: Max anomalies to return
        in: query
        maximum: 5000
        minimum: 1
        name: limit
        type: integer
      - description: Slow threshold in ms
        in: query
        name: slow_ms
        type: integer
      - description: Frequent+slow time threshold in ms
        in: query
        name: freq_slow_ms
        type: integer
      - description: Frequent count threshold
        in: query
        name: freq_count
        type: integer
      - description: Hard cap upper bound for anomalies count
        in: query
        name: cap
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sqllog.ReportData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: SQL log report (JSON)
      tags:
      - sql-logs
  /v1/sql-logs/report.csv:
    get:
      description: Download the aggregated report as CSV.
      parameters:
      - description: Start time (RFC3339 or YYYY-MM-DD)
        in: query
        name: from
        type: string
      - description: End time (RFC3339 or YYYY-MM-DD)
        in: query
        name: to
        type: string
      - description: Filter by database name
        in: query
        name: db
        type: string
      - default: 500
        description: Max anomalies to return
        in: query
        maximum: 5000
        minimum: 1
        name: limit
        type: integer
      - description: Slow threshold in ms
        in: query
        name: slow_ms
        type: integer
      - description: Frequent+slow time threshold in ms
        in: query
        name: freq_slow_ms
        type: integer
      - description: Frequent count threshold
        in: query
        name: freq_count
        type: integer
      - description: Hard cap upper bound for anomalies count
        in: query
        name: cap
        type: integer
      produces:
      - text/csv
      responses:
        "200":
          description: CSV content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: SQL log report (CSV)
      tags:
      - sql-logs
  /v1/sql-logs/report.pdf:
    get:
      description: Download the aggregated report as PDF.
      parameters:
      - description: Start time (RFC3339 or YYYY-MM-DD)
        in: query
        name: from
        type: string
      - description: End time (RFC3339 or YYYY-MM-DD)
        in: query
        name: to
        type: string
      - description: Filter by database name
        in: query
        name: db
        type: string
      - default: 500
        description: Max anomalies to return
        in: query
        maximum: 5000
        minimum: 1
        name: limit
        type: integer
      - description: Slow threshold in ms
        in: query
        name: slow_ms
        type: integer
      - description: Frequent+slow time threshold in ms
        in: query
        name: freq_slow_ms
        type: integer
      - description: Frequent count threshold
        in: query
        name: freq_count
        type: integer
      - description: Hard cap upper bound for anomalies count
        in: query
        name: cap
        type: integer
      produces:
      - application/pdf
      responses:
        "200":
          description: PDF content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: SQL log report (PDF)
      tags:
      - sql-logs
  /v1/sql-logs/scan:
    get:
      description: 'Apply rule: exec_time_ms > 500 AND exec_count > 100. Returns abnormal
        queries with status indicators.'
      parameters:
      - default: 100
        description: Maximum number of items to return
        in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      summary: Scan for abnormal SQL queries
      tags:
      - sql-logs
  /v1/sql-logs/upload:
    post:
      consumes:
      - multipart/form-data
      description: Accepts multipart/form-data with field "file" (.log or .txt), parses
        valid entries and stores them; malformed lines are reported.
      parameters:
      - description: logsql.txt
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorEnvelope'
      summary: Upload SQL log file
      tags:
      - sql-logs
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
